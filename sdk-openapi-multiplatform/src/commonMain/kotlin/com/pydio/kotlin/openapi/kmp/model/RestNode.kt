/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.pydio.kotlin.openapi.kmp.model

import com.pydio.kotlin.openapi.kmp.model.ActivityObject
import com.pydio.kotlin.openapi.kmp.model.ActivitySubscription
import com.pydio.kotlin.openapi.kmp.model.RestContextWorkspace
import com.pydio.kotlin.openapi.kmp.model.RestCountMeta
import com.pydio.kotlin.openapi.kmp.model.RestDataSourceFeatures
import com.pydio.kotlin.openapi.kmp.model.RestFilePreview
import com.pydio.kotlin.openapi.kmp.model.RestImageMeta
import com.pydio.kotlin.openapi.kmp.model.RestJsonMeta
import com.pydio.kotlin.openapi.kmp.model.RestLockInfo
import com.pydio.kotlin.openapi.kmp.model.RestMode
import com.pydio.kotlin.openapi.kmp.model.RestRevisionMeta
import com.pydio.kotlin.openapi.kmp.model.RestShareLink
import com.pydio.kotlin.openapi.kmp.model.RestUserMeta
import com.pydio.kotlin.openapi.kmp.model.TreeNodeType

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * Representation of a file or folder
 *
 * @param path 
 * @param uuid 
 * @param activities 
 * @param contentLock 
 * @param contentType 
 * @param contentsHash 
 * @param contextWorkspace 
 * @param dataSourceFeatures 
 * @param folderMeta 
 * @param hashingMethod 
 * @param imageMeta 
 * @param isBookmarked 
 * @param isRecycleBin 
 * @param isRecycled 
 * @param metadata 
 * @param mode 
 * @param modified Date instead of TS ?
 * @param previews 
 * @param revisionMeta 
 * @param shares 
 * @param propertySize 
 * @param storageETag 
 * @param subscriptions 
 * @param type 
 * @param userMetadata 
 */
@Serializable

data class RestNode (

    @SerialName(value = "Path") @Required val path: kotlin.String,

    @SerialName(value = "Uuid") @Required val uuid: kotlin.String,

    @SerialName(value = "Activities") val activities: kotlin.collections.List<ActivityObject>? = null,

    @SerialName(value = "ContentLock") val contentLock: RestLockInfo? = null,

    @SerialName(value = "ContentType") val contentType: kotlin.String? = null,

    @SerialName(value = "ContentsHash") val contentsHash: kotlin.String? = null,

    @SerialName(value = "ContextWorkspace") val contextWorkspace: RestContextWorkspace? = null,

    @SerialName(value = "DataSourceFeatures") val dataSourceFeatures: RestDataSourceFeatures? = null,

    @SerialName(value = "FolderMeta") val folderMeta: kotlin.collections.List<RestCountMeta>? = null,

    @SerialName(value = "HashingMethod") val hashingMethod: kotlin.String? = null,

    @SerialName(value = "ImageMeta") val imageMeta: RestImageMeta? = null,

    @SerialName(value = "IsBookmarked") val isBookmarked: kotlin.Boolean? = null,

    @SerialName(value = "IsRecycleBin") val isRecycleBin: kotlin.Boolean? = null,

    @SerialName(value = "IsRecycled") val isRecycled: kotlin.Boolean? = null,

    @SerialName(value = "Metadata") val metadata: kotlin.collections.List<RestJsonMeta>? = null,

    @SerialName(value = "Mode") val mode: RestMode? = RestMode.Default,

    /* Date instead of TS ? */
    @SerialName(value = "Modified") val modified: kotlin.String? = null,

    @SerialName(value = "Previews") val previews: kotlin.collections.List<RestFilePreview>? = null,

    @SerialName(value = "RevisionMeta") val revisionMeta: RestRevisionMeta? = null,

    @SerialName(value = "Shares") val shares: kotlin.collections.List<RestShareLink>? = null,

    @SerialName(value = "Size") val propertySize: kotlin.String? = null,

    @SerialName(value = "StorageETag") val storageETag: kotlin.String? = null,

    @SerialName(value = "Subscriptions") val subscriptions: kotlin.collections.List<ActivitySubscription>? = null,

    @SerialName(value = "Type") val type: TreeNodeType? = TreeNodeType.UNKNOWN,

    @SerialName(value = "UserMetadata") val userMetadata: kotlin.collections.List<RestUserMeta>? = null

) {


}

