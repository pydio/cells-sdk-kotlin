/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.pydio.kotlin.openapi.model

import io.kotlintest.specs.ShouldSpec

class TreeQueryTest : ShouldSpec() {
  init {
    // uncomment below to create an instance of TreeQuery
    // val modelInstance = TreeQuery()

    // to test the property `content`
    should("test content") {
      // uncomment below to test the property
      // modelInstance.content shouldBe ("TODO")
    }

    // to test the property `durationDate`
    should("test durationDate") {
      // uncomment below to test the property
      // modelInstance.durationDate shouldBe ("TODO")
    }

    // to test the property `etag`
    should("test etag") {
      // uncomment below to test the property
      // modelInstance.etag shouldBe ("TODO")
    }

    // to test the property `extension`
    should("test extension") {
      // uncomment below to test the property
      // modelInstance.extension shouldBe ("TODO")
    }

    // to test the property `fileName`
    should("test fileName") {
      // uncomment below to test the property
      // modelInstance.fileName shouldBe ("TODO")
    }

    // to test the property `fileNameOrContent`
    should("test fileNameOrContent") {
      // uncomment below to test the property
      // modelInstance.fileNameOrContent shouldBe ("TODO")
    }

    // to test the property `freeString` - Bleve-like search query to search for a specific metadata
    // value. When querying nodes, this will redirect this query to the Search Engine. When
    // filtering an input, this will load an in-memory bleve engine to evaluate the node.  Bleve
    // query string format is a space separated list of `[+-]key:value`, where node meta keys must
    // be prepended with \"Meta.\" For Example, for tags: `+Meta.usermeta-tags:myvalue`
    should("test freeString") {
      // uncomment below to test the property
      // modelInstance.freeString shouldBe ("TODO")
    }

    // to test the property `geoQuery`
    should("test geoQuery") {
      // uncomment below to test the property
      // modelInstance.geoQuery shouldBe ("TODO")
    }

    // to test the property `maxDate`
    should("test maxDate") {
      // uncomment below to test the property
      // modelInstance.maxDate shouldBe ("TODO")
    }

    // to test the property `maxSize`
    should("test maxSize") {
      // uncomment below to test the property
      // modelInstance.maxSize shouldBe ("TODO")
    }

    // to test the property `minDate`
    should("test minDate") {
      // uncomment below to test the property
      // modelInstance.minDate shouldBe ("TODO")
    }

    // to test the property `minSize`
    should("test minSize") {
      // uncomment below to test the property
      // modelInstance.minSize shouldBe ("TODO")
    }

    // to test the property `not`
    should("test not") {
      // uncomment below to test the property
      // modelInstance.not shouldBe ("TODO")
    }

    // to test the property `pathDepth`
    should("test pathDepth") {
      // uncomment below to test the property
      // modelInstance.pathDepth shouldBe ("TODO")
    }

    // to test the property `pathPrefix`
    should("test pathPrefix") {
      // uncomment below to test the property
      // modelInstance.pathPrefix shouldBe ("TODO")
    }

    // to test the property `paths`
    should("test paths") {
      // uncomment below to test the property
      // modelInstance.paths shouldBe ("TODO")
    }

    // to test the property `type`
    should("test type") {
      // uncomment below to test the property
      // modelInstance.type shouldBe ("TODO")
    }

    // to test the property `uuIDs`
    should("test uuIDs") {
      // uncomment below to test the property
      // modelInstance.uuIDs shouldBe ("TODO")
    }
  }
}
