/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.pydio.kotlin.openapi.api

import io.kotlintest.specs.ShouldSpec

class ConfigServiceApiTest : ShouldSpec() {
  init {
    // uncomment below to create an instance of ConfigServiceApi
    // val apiInstance = ConfigServiceApi()

    // to test configFormsDiscovery
    should("test configFormsDiscovery") {
      // uncomment below to test configFormsDiscovery
      // val serviceName : kotlin.String = serviceName_example // kotlin.String | Retrieve a
      // configuration form for a given service
      // val result : RestDiscoveryResponse = apiInstance.configFormsDiscovery(serviceName)
      // result shouldBe ("TODO")
    }

    // to test controlService
    should("test controlService") {
      // uncomment below to test controlService
      // val body : RestControlServiceRequest =  // RestControlServiceRequest |
      // val result : CtlService = apiInstance.controlService(body)
      // result shouldBe ("TODO")
    }

    // to test createEncryptionKey
    should("test createEncryptionKey") {
      // uncomment below to test createEncryptionKey
      // val body : EncryptionAdminCreateKeyRequest =  // EncryptionAdminCreateKeyRequest |
      // val result : EncryptionAdminCreateKeyResponse = apiInstance.createEncryptionKey(body)
      // result shouldBe ("TODO")
    }

    // to test createPeerFolder
    should("test createPeerFolder") {
      // uncomment below to test createPeerFolder
      // val peerAddress : kotlin.String = peerAddress_example // kotlin.String | Restrict listing
      // to a given peer
      // val body : RestCreatePeerFolderRequest =  // RestCreatePeerFolderRequest |
      // val result : RestCreatePeerFolderResponse = apiInstance.createPeerFolder(peerAddress, body)
      // result shouldBe ("TODO")
    }

    // to test createStorageBucket
    should("test createStorageBucket") {
      // uncomment below to test createStorageBucket
      // val bucketName : kotlin.String = bucketName_example // kotlin.String |
      // val body : RestCreateStorageBucketRequest =  // RestCreateStorageBucketRequest |
      // val result : RestCreateStorageBucketResponse = apiInstance.createStorageBucket(bucketName,
      // body)
      // result shouldBe ("TODO")
    }

    // to test deleteDataSource
    should("test deleteDataSource") {
      // uncomment below to test deleteDataSource
      // val name : kotlin.String = name_example // kotlin.String | Name of the data source (max
      // length 34)
      // val disabled : kotlin.Boolean = true // kotlin.Boolean | Whether this data source is
      // disabled or running
      // val storageType : kotlin.String = storageType_example // kotlin.String | Type of underlying
      // storage (LOCAL, S3, AZURE, GCS)
      // val storageConfiguration : kotlin.String = storageConfiguration_example // kotlin.String |
      // List of key values describing storage configuration  This is a request variable of the map
      // type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key
      // type is string, and the value type is integer, the query parameter is expressed as
      // Age[\"bob\"]=18
      // val objectsServiceName : kotlin.String = objectsServiceName_example // kotlin.String |
      // Corresponding objects service name (underlying s3 service)
      // val objectsHost : kotlin.String = objectsHost_example // kotlin.String | Corresponding
      // objects service host
      // val objectsPort : kotlin.Int = 56 // kotlin.Int | Corresponding objects service port
      // val objectsSecure : kotlin.Boolean = true // kotlin.Boolean | Corresponding objects service
      // connection type
      // val objectsBucket : kotlin.String = objectsBucket_example // kotlin.String | Corresponding
      // objects service bucket
      // val objectsBaseFolder : kotlin.String = objectsBaseFolder_example // kotlin.String |
      // Corresponding objects service base folder inside the bucket
      // val apiKey : kotlin.String = apiKey_example // kotlin.String | Corresponding objects
      // service api key
      // val apiSecret : kotlin.String = apiSecret_example // kotlin.String | Corresponding objects
      // service api secret
      // val peerAddress : kotlin.String = peerAddress_example // kotlin.String | Peer address of
      // the data source
      // val watch : kotlin.Boolean = true // kotlin.Boolean | Not implemented, whether to watch for
      // underlying changes on the FS
      // val flatStorage : kotlin.Boolean = true // kotlin.Boolean | Store data in flat format
      // (object-storage like)
      // val skipSyncOnRestart : kotlin.Boolean = true // kotlin.Boolean | Do not trigger resync at
      // start
      // val encryptionMode : kotlin.String = encryptionMode_example // kotlin.String | Type of
      // encryption applied before sending data to storage
      // val encryptionKey : kotlin.String = encryptionKey_example // kotlin.String | Encryption key
      // used for encrypting data
      // val versioningPolicyName : kotlin.String = versioningPolicyName_example // kotlin.String |
      // Versioning policy describes how files are kept in the versioning queue
      // val creationDate : kotlin.Int = 56 // kotlin.Int | Data Source creation date
      // val lastSynchronizationDate : kotlin.Int = 56 // kotlin.Int | Data Source last
      // synchronization date
      // val result : RestDeleteDataSourceResponse = apiInstance.deleteDataSource(name, disabled,
      // storageType, storageConfiguration, objectsServiceName, objectsHost, objectsPort,
      // objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch,
      // flatStorage, skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName,
      // creationDate, lastSynchronizationDate)
      // result shouldBe ("TODO")
    }

    // to test deleteEncryptionKey
    should("test deleteEncryptionKey") {
      // uncomment below to test deleteEncryptionKey
      // val body : EncryptionAdminDeleteKeyRequest =  // EncryptionAdminDeleteKeyRequest |
      // val result : EncryptionAdminDeleteKeyResponse = apiInstance.deleteEncryptionKey(body)
      // result shouldBe ("TODO")
    }

    // to test endpointsDiscovery
    should("test endpointsDiscovery") {
      // uncomment below to test endpointsDiscovery
      // val endpointType : kotlin.String = endpointType_example // kotlin.String | Filter result to
      // a specific endpoint type
      // val result : RestDiscoveryResponse = apiInstance.endpointsDiscovery(endpointType)
      // result shouldBe ("TODO")
    }

    // to test exportEncryptionKey
    should("test exportEncryptionKey") {
      // uncomment below to test exportEncryptionKey
      // val body : EncryptionAdminExportKeyRequest =  // EncryptionAdminExportKeyRequest |
      // val result : EncryptionAdminExportKeyResponse = apiInstance.exportEncryptionKey(body)
      // result shouldBe ("TODO")
    }

    // to test getConfig
    should("test getConfig") {
      // uncomment below to test getConfig
      // val fullPath : kotlin.String = fullPath_example // kotlin.String | Full slash-separated
      // path to the config key
      // val `data` : kotlin.String = `data`_example // kotlin.String | JSON-encoded data to store
      // val result : RestConfiguration = apiInstance.getConfig(fullPath, `data`)
      // result shouldBe ("TODO")
    }

    // to test getDataSource
    should("test getDataSource") {
      // uncomment below to test getDataSource
      // val name : kotlin.String = name_example // kotlin.String | Name of the data source (max
      // length 34)
      // val disabled : kotlin.Boolean = true // kotlin.Boolean | Whether this data source is
      // disabled or running
      // val storageType : kotlin.String = storageType_example // kotlin.String | Type of underlying
      // storage (LOCAL, S3, AZURE, GCS)
      // val storageConfiguration : kotlin.String = storageConfiguration_example // kotlin.String |
      // List of key values describing storage configuration  This is a request variable of the map
      // type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key
      // type is string, and the value type is integer, the query parameter is expressed as
      // Age[\"bob\"]=18
      // val objectsServiceName : kotlin.String = objectsServiceName_example // kotlin.String |
      // Corresponding objects service name (underlying s3 service)
      // val objectsHost : kotlin.String = objectsHost_example // kotlin.String | Corresponding
      // objects service host
      // val objectsPort : kotlin.Int = 56 // kotlin.Int | Corresponding objects service port
      // val objectsSecure : kotlin.Boolean = true // kotlin.Boolean | Corresponding objects service
      // connection type
      // val objectsBucket : kotlin.String = objectsBucket_example // kotlin.String | Corresponding
      // objects service bucket
      // val objectsBaseFolder : kotlin.String = objectsBaseFolder_example // kotlin.String |
      // Corresponding objects service base folder inside the bucket
      // val apiKey : kotlin.String = apiKey_example // kotlin.String | Corresponding objects
      // service api key
      // val apiSecret : kotlin.String = apiSecret_example // kotlin.String | Corresponding objects
      // service api secret
      // val peerAddress : kotlin.String = peerAddress_example // kotlin.String | Peer address of
      // the data source
      // val watch : kotlin.Boolean = true // kotlin.Boolean | Not implemented, whether to watch for
      // underlying changes on the FS
      // val flatStorage : kotlin.Boolean = true // kotlin.Boolean | Store data in flat format
      // (object-storage like)
      // val skipSyncOnRestart : kotlin.Boolean = true // kotlin.Boolean | Do not trigger resync at
      // start
      // val encryptionMode : kotlin.String = encryptionMode_example // kotlin.String | Type of
      // encryption applied before sending data to storage
      // val encryptionKey : kotlin.String = encryptionKey_example // kotlin.String | Encryption key
      // used for encrypting data
      // val versioningPolicyName : kotlin.String = versioningPolicyName_example // kotlin.String |
      // Versioning policy describes how files are kept in the versioning queue
      // val creationDate : kotlin.Int = 56 // kotlin.Int | Data Source creation date
      // val lastSynchronizationDate : kotlin.Int = 56 // kotlin.Int | Data Source last
      // synchronization date
      // val result : ObjectDataSource = apiInstance.getDataSource(name, disabled, storageType,
      // storageConfiguration, objectsServiceName, objectsHost, objectsPort, objectsSecure,
      // objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, flatStorage,
      // skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName, creationDate,
      // lastSynchronizationDate)
      // result shouldBe ("TODO")
    }

    // to test getVersioningPolicy
    should("test getVersioningPolicy") {
      // uncomment below to test getVersioningPolicy
      // val uuid : kotlin.String = uuid_example // kotlin.String |
      // val name : kotlin.String = name_example // kotlin.String |
      // val description : kotlin.String = description_example // kotlin.String |
      // val versionsDataSourceName : kotlin.String = versionsDataSourceName_example //
      // kotlin.String |
      // val versionsDataSourceBucket : kotlin.String = versionsDataSourceBucket_example //
      // kotlin.String |
      // val maxTotalSize : kotlin.String = maxTotalSize_example // kotlin.String |
      // val maxSizePerFile : kotlin.String = maxSizePerFile_example // kotlin.String |
      // val ignoreFilesGreaterThan : kotlin.String = ignoreFilesGreaterThan_example //
      // kotlin.String |
      // val nodeDeletedStrategy : kotlin.String = nodeDeletedStrategy_example // kotlin.String |
      // val result : TreeVersioningPolicy = apiInstance.getVersioningPolicy(uuid, name,
      // description, versionsDataSourceName, versionsDataSourceBucket, maxTotalSize,
      // maxSizePerFile, ignoreFilesGreaterThan, nodeDeletedStrategy)
      // result shouldBe ("TODO")
    }

    // to test importEncryptionKey
    should("test importEncryptionKey") {
      // uncomment below to test importEncryptionKey
      // val body : EncryptionAdminImportKeyRequest =  // EncryptionAdminImportKeyRequest |
      // val result : EncryptionAdminImportKeyResponse = apiInstance.importEncryptionKey(body)
      // result shouldBe ("TODO")
    }

    // to test listDataSources
    should("test listDataSources") {
      // uncomment below to test listDataSources
      // val result : RestDataSourceCollection = apiInstance.listDataSources()
      // result shouldBe ("TODO")
    }

    // to test listEncryptionKeys
    should("test listEncryptionKeys") {
      // uncomment below to test listEncryptionKeys
      // val body : EncryptionAdminListKeysRequest =  // EncryptionAdminListKeysRequest |
      // val result : EncryptionAdminListKeysResponse = apiInstance.listEncryptionKeys(body)
      // result shouldBe ("TODO")
    }

    // to test listPeerFolders
    should("test listPeerFolders") {
      // uncomment below to test listPeerFolders
      // val peerAddress : kotlin.String = peerAddress_example // kotlin.String | Restrict listing
      // to a given peer
      // val body : RestListPeerFoldersRequest =  // RestListPeerFoldersRequest |
      // val result : RestNodesCollection = apiInstance.listPeerFolders(peerAddress, body)
      // result shouldBe ("TODO")
    }

    // to test listPeersAddresses
    should("test listPeersAddresses") {
      // uncomment below to test listPeersAddresses
      // val result : RestListPeersAddressesResponse = apiInstance.listPeersAddresses()
      // result shouldBe ("TODO")
    }

    // to test listProcesses
    should("test listProcesses") {
      // uncomment below to test listProcesses
      // val body : RestListProcessesRequest =  // RestListProcessesRequest |
      // val result : RestListProcessesResponse = apiInstance.listProcesses(body)
      // result shouldBe ("TODO")
    }

    // to test listRegistry
    should("test listRegistry") {
      // uncomment below to test listRegistry
      // val body : RegistryListRequest =  // RegistryListRequest |
      // val result : RegistryListResponse = apiInstance.listRegistry(body)
      // result shouldBe ("TODO")
    }

    // to test listServices
    should("test listServices") {
      // uncomment below to test listServices
      // val statusFilter : kotlin.String = statusFilter_example // kotlin.String | Filter services
      // by a given status (ANY, STOPPED, STOPPING, RUNNING)
      // val result : RestServiceCollection = apiInstance.listServices(statusFilter)
      // result shouldBe ("TODO")
    }

    // to test listSites
    should("test listSites") {
      // uncomment below to test listSites
      // val filter : kotlin.String = filter_example // kotlin.String |
      // val result : RestListSitesResponse = apiInstance.listSites(filter)
      // result shouldBe ("TODO")
    }

    // to test listStorageBuckets
    should("test listStorageBuckets") {
      // uncomment below to test listStorageBuckets
      // val body : RestListStorageBucketsRequest =  // RestListStorageBucketsRequest |
      // val result : RestNodesCollection = apiInstance.listStorageBuckets(body)
      // result shouldBe ("TODO")
    }

    // to test listVersioningPolicies
    should("test listVersioningPolicies") {
      // uncomment below to test listVersioningPolicies
      // val result : RestVersioningPolicyCollection = apiInstance.listVersioningPolicies()
      // result shouldBe ("TODO")
    }

    // to test listVirtualNodes
    should("test listVirtualNodes") {
      // uncomment below to test listVirtualNodes
      // val result : RestNodesCollection = apiInstance.listVirtualNodes()
      // result shouldBe ("TODO")
    }

    // to test openApiDiscovery
    should("test openApiDiscovery") {
      // uncomment below to test openApiDiscovery
      // val endpointType : kotlin.String = endpointType_example // kotlin.String | Filter result to
      // a specific endpoint type
      // val result : RestOpenApiResponse = apiInstance.openApiDiscovery(endpointType)
      // result shouldBe ("TODO")
    }

    // to test putConfig
    should("test putConfig") {
      // uncomment below to test putConfig
      // val fullPath : kotlin.String = fullPath_example // kotlin.String | Full slash-separated
      // path to the config key
      // val body : ConfigServicePutConfigBody =  // ConfigServicePutConfigBody |
      // val result : RestConfiguration = apiInstance.putConfig(fullPath, body)
      // result shouldBe ("TODO")
    }

    // to test putDataSource
    should("test putDataSource") {
      // uncomment below to test putDataSource
      // val name : kotlin.String = name_example // kotlin.String | Name of the data source (max
      // length 34)
      // val body : ConfigServicePutDataSourceBody =  // ConfigServicePutDataSourceBody |
      // val result : ObjectDataSource = apiInstance.putDataSource(name, body)
      // result shouldBe ("TODO")
    }

    // to test schedulerActionFormDiscovery
    should("test schedulerActionFormDiscovery") {
      // uncomment below to test schedulerActionFormDiscovery
      // val actionName : kotlin.String = actionName_example // kotlin.String | Name of the action
      // to load
      // val result : RestSchedulerActionFormResponse =
      // apiInstance.schedulerActionFormDiscovery(actionName)
      // result shouldBe ("TODO")
    }

    // to test schedulerActionsDiscovery
    should("test schedulerActionsDiscovery") {
      // uncomment below to test schedulerActionsDiscovery
      // val result : RestSchedulerActionsResponse = apiInstance.schedulerActionsDiscovery()
      // result shouldBe ("TODO")
    }
  }
}
