/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.pydio.kotlin.openapi.model

import io.kotlintest.specs.ShouldSpec

class InstallInstallConfigTest : ShouldSpec() {
  init {
    // uncomment below to create an instance of InstallInstallConfig
    // val modelInstance = InstallInstallConfig()

    // to test the property `checkResults`
    should("test checkResults") {
      // uncomment below to test the property
      // modelInstance.checkResults shouldBe ("TODO")
    }

    // to test the property `customConfigs`
    should("test customConfigs") {
      // uncomment below to test the property
      // modelInstance.customConfigs shouldBe ("TODO")
    }

    // to test the property `documentsDSN`
    should("test documentsDSN") {
      // uncomment below to test the property
      // modelInstance.documentsDSN shouldBe ("TODO")
    }

    // to test the property `proxyConfig`
    should("test proxyConfig") {
      // uncomment below to test the property
      // modelInstance.proxyConfig shouldBe ("TODO")
    }

    // to test the property `useDocumentsDSN`
    should("test useDocumentsDSN") {
      // uncomment below to test the property
      // modelInstance.useDocumentsDSN shouldBe ("TODO")
    }

    // to test the property `dbConnectionType`
    should("test dbConnectionType") {
      // uncomment below to test the property
      // modelInstance.dbConnectionType shouldBe ("TODO")
    }

    // to test the property `dbManualDSN`
    should("test dbManualDSN") {
      // uncomment below to test the property
      // modelInstance.dbManualDSN shouldBe ("TODO")
    }

    // to test the property `dbSocketFile`
    should("test dbSocketFile") {
      // uncomment below to test the property
      // modelInstance.dbSocketFile shouldBe ("TODO")
    }

    // to test the property `dbSocketName`
    should("test dbSocketName") {
      // uncomment below to test the property
      // modelInstance.dbSocketName shouldBe ("TODO")
    }

    // to test the property `dbSocketPassword`
    should("test dbSocketPassword") {
      // uncomment below to test the property
      // modelInstance.dbSocketPassword shouldBe ("TODO")
    }

    // to test the property `dbSocketUser`
    should("test dbSocketUser") {
      // uncomment below to test the property
      // modelInstance.dbSocketUser shouldBe ("TODO")
    }

    // to test the property `dbTCPHostname`
    should("test dbTCPHostname") {
      // uncomment below to test the property
      // modelInstance.dbTCPHostname shouldBe ("TODO")
    }

    // to test the property `dbTCPName`
    should("test dbTCPName") {
      // uncomment below to test the property
      // modelInstance.dbTCPName shouldBe ("TODO")
    }

    // to test the property `dbTCPPassword`
    should("test dbTCPPassword") {
      // uncomment below to test the property
      // modelInstance.dbTCPPassword shouldBe ("TODO")
    }

    // to test the property `dbTCPPort`
    should("test dbTCPPort") {
      // uncomment below to test the property
      // modelInstance.dbTCPPort shouldBe ("TODO")
    }

    // to test the property `dbTCPUser`
    should("test dbTCPUser") {
      // uncomment below to test the property
      // modelInstance.dbTCPUser shouldBe ("TODO")
    }

    // to test the property `dbUseDefaults`
    should("test dbUseDefaults") {
      // uncomment below to test the property
      // modelInstance.dbUseDefaults shouldBe ("TODO")
    }

    // to test the property `dsFolder`
    should("test dsFolder") {
      // uncomment below to test the property
      // modelInstance.dsFolder shouldBe ("TODO")
    }

    // to test the property `dsName`
    should("test dsName") {
      // uncomment below to test the property
      // modelInstance.dsName shouldBe ("TODO")
    }

    // to test the property `dsPort`
    should("test dsPort") {
      // uncomment below to test the property
      // modelInstance.dsPort shouldBe ("TODO")
    }

    // to test the property `dsS3ApiKey`
    should("test dsS3ApiKey") {
      // uncomment below to test the property
      // modelInstance.dsS3ApiKey shouldBe ("TODO")
    }

    // to test the property `dsS3ApiSecret`
    should("test dsS3ApiSecret") {
      // uncomment below to test the property
      // modelInstance.dsS3ApiSecret shouldBe ("TODO")
    }

    // to test the property `dsS3BucketBinaries`
    should("test dsS3BucketBinaries") {
      // uncomment below to test the property
      // modelInstance.dsS3BucketBinaries shouldBe ("TODO")
    }

    // to test the property `dsS3BucketCells`
    should("test dsS3BucketCells") {
      // uncomment below to test the property
      // modelInstance.dsS3BucketCells shouldBe ("TODO")
    }

    // to test the property `dsS3BucketDefault`
    should("test dsS3BucketDefault") {
      // uncomment below to test the property
      // modelInstance.dsS3BucketDefault shouldBe ("TODO")
    }

    // to test the property `dsS3BucketPersonal`
    should("test dsS3BucketPersonal") {
      // uncomment below to test the property
      // modelInstance.dsS3BucketPersonal shouldBe ("TODO")
    }

    // to test the property `dsS3BucketThumbs`
    should("test dsS3BucketThumbs") {
      // uncomment below to test the property
      // modelInstance.dsS3BucketThumbs shouldBe ("TODO")
    }

    // to test the property `dsS3BucketVersions`
    should("test dsS3BucketVersions") {
      // uncomment below to test the property
      // modelInstance.dsS3BucketVersions shouldBe ("TODO")
    }

    // to test the property `dsS3Custom`
    should("test dsS3Custom") {
      // uncomment below to test the property
      // modelInstance.dsS3Custom shouldBe ("TODO")
    }

    // to test the property `dsS3CustomRegion`
    should("test dsS3CustomRegion") {
      // uncomment below to test the property
      // modelInstance.dsS3CustomRegion shouldBe ("TODO")
    }

    // to test the property `dsType`
    should("test dsType") {
      // uncomment below to test the property
      // modelInstance.dsType shouldBe ("TODO")
    }

    // to test the property `frontendApplicationTitle`
    should("test frontendApplicationTitle") {
      // uncomment below to test the property
      // modelInstance.frontendApplicationTitle shouldBe ("TODO")
    }

    // to test the property `frontendDefaultLanguage`
    should("test frontendDefaultLanguage") {
      // uncomment below to test the property
      // modelInstance.frontendDefaultLanguage shouldBe ("TODO")
    }

    // to test the property `frontendHosts`
    should("test frontendHosts") {
      // uncomment below to test the property
      // modelInstance.frontendHosts shouldBe ("TODO")
    }

    // to test the property `frontendLogin`
    should("test frontendLogin") {
      // uncomment below to test the property
      // modelInstance.frontendLogin shouldBe ("TODO")
    }

    // to test the property `frontendPassword`
    should("test frontendPassword") {
      // uncomment below to test the property
      // modelInstance.frontendPassword shouldBe ("TODO")
    }

    // to test the property `frontendRepeatPassword`
    should("test frontendRepeatPassword") {
      // uncomment below to test the property
      // modelInstance.frontendRepeatPassword shouldBe ("TODO")
    }

    // to test the property `internalUrl`
    should("test internalUrl") {
      // uncomment below to test the property
      // modelInstance.internalUrl shouldBe ("TODO")
    }

    // to test the property `licenseRequired`
    should("test licenseRequired") {
      // uncomment below to test the property
      // modelInstance.licenseRequired shouldBe ("TODO")
    }

    // to test the property `licenseString`
    should("test licenseString") {
      // uncomment below to test the property
      // modelInstance.licenseString shouldBe ("TODO")
    }
  }
}
