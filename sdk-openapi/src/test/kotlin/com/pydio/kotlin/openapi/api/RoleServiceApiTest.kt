/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.pydio.kotlin.openapi.api

import io.kotlintest.specs.ShouldSpec

class RoleServiceApiTest : ShouldSpec() {
  init {
    // uncomment below to create an instance of RoleServiceApi
    // val apiInstance = RoleServiceApi()

    // to test deleteRole
    should("test deleteRole") {
      // uncomment below to test deleteRole
      // val uuid : kotlin.String = uuid_example // kotlin.String | Unique identifier of this role
      // val label : kotlin.String = label_example // kotlin.String | Label of this role
      // val isTeam : kotlin.Boolean = true // kotlin.Boolean | Whether this role represents a user
      // team or not
      // val groupRole : kotlin.Boolean = true // kotlin.Boolean | Whether this role is attached to
      // a Group object
      // val userRole : kotlin.Boolean = true // kotlin.Boolean | Whether this role is attached to a
      // User object
      // val lastUpdated : kotlin.Int = 56 // kotlin.Int | Last modification date of the role
      // val autoApplies : kotlin.collections.List<kotlin.String> =  //
      // kotlin.collections.List<kotlin.String> | List of profiles (standard, shared, admin) on
      // which the role will be automatically applied
      // val policiesContextEditable : kotlin.Boolean = true // kotlin.Boolean | Whether the
      // policies resolve into an editable state
      // val forceOverride : kotlin.Boolean = true // kotlin.Boolean | Is used in a stack of roles,
      // this one will always be applied last.
      // val result : IdmRole = apiInstance.deleteRole(uuid, label, isTeam, groupRole, userRole,
      // lastUpdated, autoApplies, policiesContextEditable, forceOverride)
      // result shouldBe ("TODO")
    }

    // to test getRole
    should("test getRole") {
      // uncomment below to test getRole
      // val uuid : kotlin.String = uuid_example // kotlin.String | Unique identifier of this role
      // val label : kotlin.String = label_example // kotlin.String | Label of this role
      // val isTeam : kotlin.Boolean = true // kotlin.Boolean | Whether this role represents a user
      // team or not
      // val groupRole : kotlin.Boolean = true // kotlin.Boolean | Whether this role is attached to
      // a Group object
      // val userRole : kotlin.Boolean = true // kotlin.Boolean | Whether this role is attached to a
      // User object
      // val lastUpdated : kotlin.Int = 56 // kotlin.Int | Last modification date of the role
      // val autoApplies : kotlin.collections.List<kotlin.String> =  //
      // kotlin.collections.List<kotlin.String> | List of profiles (standard, shared, admin) on
      // which the role will be automatically applied
      // val policiesContextEditable : kotlin.Boolean = true // kotlin.Boolean | Whether the
      // policies resolve into an editable state
      // val forceOverride : kotlin.Boolean = true // kotlin.Boolean | Is used in a stack of roles,
      // this one will always be applied last.
      // val result : IdmRole = apiInstance.getRole(uuid, label, isTeam, groupRole, userRole,
      // lastUpdated, autoApplies, policiesContextEditable, forceOverride)
      // result shouldBe ("TODO")
    }

    // to test searchRoles
    should("test searchRoles") {
      // uncomment below to test searchRoles
      // val body : RestSearchRoleRequest =  // RestSearchRoleRequest |
      // val result : RestRolesCollection = apiInstance.searchRoles(body)
      // result shouldBe ("TODO")
    }

    // to test setRole
    should("test setRole") {
      // uncomment below to test setRole
      // val uuid : kotlin.String = uuid_example // kotlin.String | Unique identifier of this role
      // val body : RoleServiceSetRoleBody =  // RoleServiceSetRoleBody |
      // val result : IdmRole = apiInstance.setRole(uuid, body)
      // result shouldBe ("TODO")
    }
  }
}
