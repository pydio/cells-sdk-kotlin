/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.pydio.kotlin.openapi.api

import io.kotlintest.specs.ShouldSpec

class UserServiceApiTest : ShouldSpec() {
  init {
    // uncomment below to create an instance of UserServiceApi
    // val apiInstance = UserServiceApi()

    // to test deleteUser
    should("test deleteUser") {
      // uncomment below to test deleteUser
      // val login : kotlin.String = login_example // kotlin.String | User login is used to connect,
      // field is empty for groups
      // val uuid : kotlin.String = uuid_example // kotlin.String | User unique identifier
      // val groupPath : kotlin.String = groupPath_example // kotlin.String | Path to the parent
      // group
      // val attributes : kotlin.String = attributes_example // kotlin.String | A free list of
      // attributes  This is a request variable of the map type. The query format is
      // \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value
      // type is integer, the query parameter is expressed as Age[\"bob\"]=18
      // val password : kotlin.String = password_example // kotlin.String | Password can be passed
      // to be updated (but never read back), field is empty for groups
      // val oldPassword : kotlin.String = oldPassword_example // kotlin.String | OldPassword must
      // be set when a user updates her own password
      // val isGroup : kotlin.Boolean = true // kotlin.Boolean | Whether this object is a group or a
      // user
      // val groupLabel : kotlin.String = groupLabel_example // kotlin.String | Label of the group,
      // field is empty for users
      // val lastConnected : kotlin.Int = 56 // kotlin.Int | Last successful connection timestamp
      // val policiesContextEditable : kotlin.Boolean = true // kotlin.Boolean | Context-resolved to
      // quickly check if user is editable or not.
      // val result : RestDeleteResponse = apiInstance.deleteUser(login, uuid, groupPath,
      // attributes, password, oldPassword, isGroup, groupLabel, lastConnected,
      // policiesContextEditable)
      // result shouldBe ("TODO")
    }

    // to test getUser
    should("test getUser") {
      // uncomment below to test getUser
      // val login : kotlin.String = login_example // kotlin.String | User login is used to connect,
      // field is empty for groups
      // val uuid : kotlin.String = uuid_example // kotlin.String | User unique identifier
      // val groupPath : kotlin.String = groupPath_example // kotlin.String | Path to the parent
      // group
      // val attributes : kotlin.String = attributes_example // kotlin.String | A free list of
      // attributes  This is a request variable of the map type. The query format is
      // \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value
      // type is integer, the query parameter is expressed as Age[\"bob\"]=18
      // val password : kotlin.String = password_example // kotlin.String | Password can be passed
      // to be updated (but never read back), field is empty for groups
      // val oldPassword : kotlin.String = oldPassword_example // kotlin.String | OldPassword must
      // be set when a user updates her own password
      // val isGroup : kotlin.Boolean = true // kotlin.Boolean | Whether this object is a group or a
      // user
      // val groupLabel : kotlin.String = groupLabel_example // kotlin.String | Label of the group,
      // field is empty for users
      // val lastConnected : kotlin.Int = 56 // kotlin.Int | Last successful connection timestamp
      // val policiesContextEditable : kotlin.Boolean = true // kotlin.Boolean | Context-resolved to
      // quickly check if user is editable or not.
      // val result : IdmUser = apiInstance.getUser(login, uuid, groupPath, attributes, password,
      // oldPassword, isGroup, groupLabel, lastConnected, policiesContextEditable)
      // result shouldBe ("TODO")
    }

    // to test putRoles
    should("test putRoles") {
      // uncomment below to test putRoles
      // val login : kotlin.String = login_example // kotlin.String | User login is used to connect,
      // field is empty for groups
      // val body : UserServicePutRolesBody =  // UserServicePutRolesBody |
      // val result : IdmUser = apiInstance.putRoles(login, body)
      // result shouldBe ("TODO")
    }

    // to test putUser
    should("test putUser") {
      // uncomment below to test putUser
      // val login : kotlin.String = login_example // kotlin.String | User login is used to connect,
      // field is empty for groups
      // val body : UserServicePutUserBody =  // UserServicePutUserBody |
      // val result : IdmUser = apiInstance.putUser(login, body)
      // result shouldBe ("TODO")
    }

    // to test searchUsers
    should("test searchUsers") {
      // uncomment below to test searchUsers
      // val body : RestSearchUserRequest =  // RestSearchUserRequest |
      // val result : RestUsersCollection = apiInstance.searchUsers(body)
      // result shouldBe ("TODO")
    }
  }
}
