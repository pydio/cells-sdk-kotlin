/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.pydio.kotlin.openapi.api

import com.pydio.kotlin.openapi.infrastructure.ApiClient
import com.pydio.kotlin.openapi.infrastructure.ApiResponse
import com.pydio.kotlin.openapi.infrastructure.ClientError
import com.pydio.kotlin.openapi.infrastructure.ClientException
import com.pydio.kotlin.openapi.infrastructure.MultiValueMap
import com.pydio.kotlin.openapi.infrastructure.RequestConfig
import com.pydio.kotlin.openapi.infrastructure.RequestMethod
import com.pydio.kotlin.openapi.infrastructure.ResponseType
import com.pydio.kotlin.openapi.infrastructure.ServerError
import com.pydio.kotlin.openapi.infrastructure.ServerException
import com.pydio.kotlin.openapi.infrastructure.Success
import com.pydio.kotlin.openapi.model.IdmWorkspace
import com.pydio.kotlin.openapi.model.RestDeleteResponse
import com.pydio.kotlin.openapi.model.RestSearchWorkspaceRequest
import com.pydio.kotlin.openapi.model.RestWorkspaceCollection
import com.pydio.kotlin.openapi.model.WorkspaceServicePutWorkspaceBody
import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

class WorkspaceServiceApi(
    basePath: kotlin.String = defaultBasePath,
    client: Call.Factory = ApiClient.defaultClient
) : ApiClient(basePath, client) {
  companion object {
    @JvmStatic
    val defaultBasePath: String by lazy {
      System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
    }
  }

  /**
   * Delete an existing workspace
   *
   * @param slug
   * @return RestDeleteResponse
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   * @throws UnsupportedOperationException If the API returns an informational or redirection
   *   response
   * @throws ClientException If the API returns a client error response
   * @throws ServerException If the API returns a server error response
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(
      IllegalStateException::class,
      IOException::class,
      UnsupportedOperationException::class,
      ClientException::class,
      ServerException::class)
  fun deleteWorkspace(slug: kotlin.String): RestDeleteResponse {
    val localVarResponse = deleteWorkspaceWithHttpInfo(slug = slug)

    return when (localVarResponse.responseType) {
      ResponseType.Success -> (localVarResponse as Success<*>).data as RestDeleteResponse
      ResponseType.Informational ->
          throw UnsupportedOperationException("Client does not support Informational responses.")
      ResponseType.Redirection ->
          throw UnsupportedOperationException("Client does not support Redirection responses.")
      ResponseType.ClientError -> {
        val localVarError = localVarResponse as ClientError<*>
        throw ClientException(
            "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
            localVarError.statusCode,
            localVarResponse)
      }
      ResponseType.ServerError -> {
        val localVarError = localVarResponse as ServerError<*>
        throw ServerException(
            "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
            localVarError.statusCode,
            localVarResponse)
      }
    }
  }

  /**
   * Delete an existing workspace
   *
   * @param slug
   * @return ApiResponse<RestDeleteResponse?>
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(IllegalStateException::class, IOException::class)
  fun deleteWorkspaceWithHttpInfo(slug: kotlin.String): ApiResponse<RestDeleteResponse?> {
    val localVariableConfig = deleteWorkspaceRequestConfig(slug = slug)

    return request<Unit, RestDeleteResponse>(localVariableConfig)
  }

  /**
   * To obtain the request config of the operation deleteWorkspace
   *
   * @param slug
   * @return RequestConfig
   */
  fun deleteWorkspaceRequestConfig(slug: kotlin.String): RequestConfig<Unit> {
    val localVariableBody = null
    val localVariableQuery: MultiValueMap = mutableMapOf()
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders["Accept"] = "application/json"

    return RequestConfig(
        method = RequestMethod.DELETE,
        path = "/workspace/{Slug}".replace("{" + "Slug" + "}", encodeURIComponent(slug.toString())),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = false,
        body = localVariableBody)
  }

  /**
   * Create or update a workspace
   *
   * @param slug Slug is an url-compatible form of the workspace label, or can be freely modified
   *   (max length 500)
   * @param body
   * @return IdmWorkspace
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   * @throws UnsupportedOperationException If the API returns an informational or redirection
   *   response
   * @throws ClientException If the API returns a client error response
   * @throws ServerException If the API returns a server error response
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(
      IllegalStateException::class,
      IOException::class,
      UnsupportedOperationException::class,
      ClientException::class,
      ServerException::class)
  fun putWorkspace(slug: kotlin.String, body: WorkspaceServicePutWorkspaceBody): IdmWorkspace {
    val localVarResponse = putWorkspaceWithHttpInfo(slug = slug, body = body)

    return when (localVarResponse.responseType) {
      ResponseType.Success -> (localVarResponse as Success<*>).data as IdmWorkspace
      ResponseType.Informational ->
          throw UnsupportedOperationException("Client does not support Informational responses.")
      ResponseType.Redirection ->
          throw UnsupportedOperationException("Client does not support Redirection responses.")
      ResponseType.ClientError -> {
        val localVarError = localVarResponse as ClientError<*>
        throw ClientException(
            "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
            localVarError.statusCode,
            localVarResponse)
      }
      ResponseType.ServerError -> {
        val localVarError = localVarResponse as ServerError<*>
        throw ServerException(
            "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
            localVarError.statusCode,
            localVarResponse)
      }
    }
  }

  /**
   * Create or update a workspace
   *
   * @param slug Slug is an url-compatible form of the workspace label, or can be freely modified
   *   (max length 500)
   * @param body
   * @return ApiResponse<IdmWorkspace?>
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(IllegalStateException::class, IOException::class)
  fun putWorkspaceWithHttpInfo(
      slug: kotlin.String,
      body: WorkspaceServicePutWorkspaceBody
  ): ApiResponse<IdmWorkspace?> {
    val localVariableConfig = putWorkspaceRequestConfig(slug = slug, body = body)

    return request<WorkspaceServicePutWorkspaceBody, IdmWorkspace>(localVariableConfig)
  }

  /**
   * To obtain the request config of the operation putWorkspace
   *
   * @param slug Slug is an url-compatible form of the workspace label, or can be freely modified
   *   (max length 500)
   * @param body
   * @return RequestConfig
   */
  fun putWorkspaceRequestConfig(
      slug: kotlin.String,
      body: WorkspaceServicePutWorkspaceBody
  ): RequestConfig<WorkspaceServicePutWorkspaceBody> {
    val localVariableBody = body
    val localVariableQuery: MultiValueMap = mutableMapOf()
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders["Content-Type"] = "application/json"
    localVariableHeaders["Accept"] = "application/json"

    return RequestConfig(
        method = RequestMethod.PUT,
        path = "/workspace/{Slug}".replace("{" + "Slug" + "}", encodeURIComponent(slug.toString())),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = false,
        body = localVariableBody)
  }

  /**
   * Search workspaces on certain keys
   *
   * @param body
   * @return RestWorkspaceCollection
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   * @throws UnsupportedOperationException If the API returns an informational or redirection
   *   response
   * @throws ClientException If the API returns a client error response
   * @throws ServerException If the API returns a server error response
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(
      IllegalStateException::class,
      IOException::class,
      UnsupportedOperationException::class,
      ClientException::class,
      ServerException::class)
  fun searchWorkspaces(body: RestSearchWorkspaceRequest): RestWorkspaceCollection {
    val localVarResponse = searchWorkspacesWithHttpInfo(body = body)

    return when (localVarResponse.responseType) {
      ResponseType.Success -> (localVarResponse as Success<*>).data as RestWorkspaceCollection
      ResponseType.Informational ->
          throw UnsupportedOperationException("Client does not support Informational responses.")
      ResponseType.Redirection ->
          throw UnsupportedOperationException("Client does not support Redirection responses.")
      ResponseType.ClientError -> {
        val localVarError = localVarResponse as ClientError<*>
        throw ClientException(
            "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
            localVarError.statusCode,
            localVarResponse)
      }
      ResponseType.ServerError -> {
        val localVarError = localVarResponse as ServerError<*>
        throw ServerException(
            "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
            localVarError.statusCode,
            localVarResponse)
      }
    }
  }

  /**
   * Search workspaces on certain keys
   *
   * @param body
   * @return ApiResponse<RestWorkspaceCollection?>
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(IllegalStateException::class, IOException::class)
  fun searchWorkspacesWithHttpInfo(
      body: RestSearchWorkspaceRequest
  ): ApiResponse<RestWorkspaceCollection?> {
    val localVariableConfig = searchWorkspacesRequestConfig(body = body)

    return request<RestSearchWorkspaceRequest, RestWorkspaceCollection>(localVariableConfig)
  }

  /**
   * To obtain the request config of the operation searchWorkspaces
   *
   * @param body
   * @return RequestConfig
   */
  fun searchWorkspacesRequestConfig(
      body: RestSearchWorkspaceRequest
  ): RequestConfig<RestSearchWorkspaceRequest> {
    val localVariableBody = body
    val localVariableQuery: MultiValueMap = mutableMapOf()
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders["Content-Type"] = "application/json"
    localVariableHeaders["Accept"] = "application/json"

    return RequestConfig(
        method = RequestMethod.POST,
        path = "/workspace",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = false,
        body = localVariableBody)
  }

  private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
      HttpUrl.Builder()
          .scheme("http")
          .host("localhost")
          .addPathSegment(uriComponent)
          .build()
          .encodedPathSegments[0]
}
