/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.pydio.kotlin.openapi.api

import com.pydio.kotlin.openapi.infrastructure.ApiClient
import com.pydio.kotlin.openapi.infrastructure.ApiResponse
import com.pydio.kotlin.openapi.infrastructure.ClientError
import com.pydio.kotlin.openapi.infrastructure.ClientException
import com.pydio.kotlin.openapi.infrastructure.MultiValueMap
import com.pydio.kotlin.openapi.infrastructure.RequestConfig
import com.pydio.kotlin.openapi.infrastructure.RequestMethod
import com.pydio.kotlin.openapi.infrastructure.ResponseType
import com.pydio.kotlin.openapi.infrastructure.ServerError
import com.pydio.kotlin.openapi.infrastructure.ServerException
import com.pydio.kotlin.openapi.infrastructure.Success
import com.pydio.kotlin.openapi.model.RestDocumentAccessTokenRequest
import com.pydio.kotlin.openapi.model.RestDocumentAccessTokenResponse
import com.pydio.kotlin.openapi.model.RestResetPasswordRequest
import com.pydio.kotlin.openapi.model.RestResetPasswordResponse
import com.pydio.kotlin.openapi.model.RestResetPasswordTokenResponse
import com.pydio.kotlin.openapi.model.RestRevokeRequest
import com.pydio.kotlin.openapi.model.RestRevokeResponse
import com.pydio.kotlin.openapi.model.TokenServiceResetPasswordTokenBody
import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

class TokenServiceApi(
    basePath: kotlin.String = defaultBasePath,
    client: Call.Factory = ApiClient.defaultClient
) : ApiClient(basePath, client) {
  companion object {
    @JvmStatic
    val defaultBasePath: String by lazy {
      System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
    }
  }

  /**
   * Generate a temporary access token for a specific document for the current user
   *
   * @param body
   * @return RestDocumentAccessTokenResponse
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   * @throws UnsupportedOperationException If the API returns an informational or redirection
   *   response
   * @throws ClientException If the API returns a client error response
   * @throws ServerException If the API returns a server error response
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(
      IllegalStateException::class,
      IOException::class,
      UnsupportedOperationException::class,
      ClientException::class,
      ServerException::class)
  fun generateDocumentAccessToken(
      body: RestDocumentAccessTokenRequest
  ): RestDocumentAccessTokenResponse {
    val localVarResponse = generateDocumentAccessTokenWithHttpInfo(body = body)

    return when (localVarResponse.responseType) {
      ResponseType.Success ->
          (localVarResponse as Success<*>).data as RestDocumentAccessTokenResponse
      ResponseType.Informational ->
          throw UnsupportedOperationException("Client does not support Informational responses.")
      ResponseType.Redirection ->
          throw UnsupportedOperationException("Client does not support Redirection responses.")
      ResponseType.ClientError -> {
        val localVarError = localVarResponse as ClientError<*>
        throw ClientException(
            "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
            localVarError.statusCode,
            localVarResponse)
      }
      ResponseType.ServerError -> {
        val localVarError = localVarResponse as ServerError<*>
        throw ServerException(
            "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
            localVarError.statusCode,
            localVarResponse)
      }
    }
  }

  /**
   * Generate a temporary access token for a specific document for the current user
   *
   * @param body
   * @return ApiResponse<RestDocumentAccessTokenResponse?>
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(IllegalStateException::class, IOException::class)
  fun generateDocumentAccessTokenWithHttpInfo(
      body: RestDocumentAccessTokenRequest
  ): ApiResponse<RestDocumentAccessTokenResponse?> {
    val localVariableConfig = generateDocumentAccessTokenRequestConfig(body = body)

    return request<RestDocumentAccessTokenRequest, RestDocumentAccessTokenResponse>(
        localVariableConfig)
  }

  /**
   * To obtain the request config of the operation generateDocumentAccessToken
   *
   * @param body
   * @return RequestConfig
   */
  fun generateDocumentAccessTokenRequestConfig(
      body: RestDocumentAccessTokenRequest
  ): RequestConfig<RestDocumentAccessTokenRequest> {
    val localVariableBody = body
    val localVariableQuery: MultiValueMap = mutableMapOf()
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders["Content-Type"] = "application/json"
    localVariableHeaders["Accept"] = "application/json"

    return RequestConfig(
        method = RequestMethod.POST,
        path = "/auth/token/document",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = false,
        body = localVariableBody)
  }

  /**
   * Finish up the reset password process by providing the unique token
   *
   * @param body
   * @return RestResetPasswordResponse
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   * @throws UnsupportedOperationException If the API returns an informational or redirection
   *   response
   * @throws ClientException If the API returns a client error response
   * @throws ServerException If the API returns a server error response
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(
      IllegalStateException::class,
      IOException::class,
      UnsupportedOperationException::class,
      ClientException::class,
      ServerException::class)
  fun resetPassword(body: RestResetPasswordRequest): RestResetPasswordResponse {
    val localVarResponse = resetPasswordWithHttpInfo(body = body)

    return when (localVarResponse.responseType) {
      ResponseType.Success -> (localVarResponse as Success<*>).data as RestResetPasswordResponse
      ResponseType.Informational ->
          throw UnsupportedOperationException("Client does not support Informational responses.")
      ResponseType.Redirection ->
          throw UnsupportedOperationException("Client does not support Redirection responses.")
      ResponseType.ClientError -> {
        val localVarError = localVarResponse as ClientError<*>
        throw ClientException(
            "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
            localVarError.statusCode,
            localVarResponse)
      }
      ResponseType.ServerError -> {
        val localVarError = localVarResponse as ServerError<*>
        throw ServerException(
            "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
            localVarError.statusCode,
            localVarResponse)
      }
    }
  }

  /**
   * Finish up the reset password process by providing the unique token
   *
   * @param body
   * @return ApiResponse<RestResetPasswordResponse?>
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(IllegalStateException::class, IOException::class)
  fun resetPasswordWithHttpInfo(
      body: RestResetPasswordRequest
  ): ApiResponse<RestResetPasswordResponse?> {
    val localVariableConfig = resetPasswordRequestConfig(body = body)

    return request<RestResetPasswordRequest, RestResetPasswordResponse>(localVariableConfig)
  }

  /**
   * To obtain the request config of the operation resetPassword
   *
   * @param body
   * @return RequestConfig
   */
  fun resetPasswordRequestConfig(
      body: RestResetPasswordRequest
  ): RequestConfig<RestResetPasswordRequest> {
    val localVariableBody = body
    val localVariableQuery: MultiValueMap = mutableMapOf()
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders["Content-Type"] = "application/json"
    localVariableHeaders["Accept"] = "application/json"

    return RequestConfig(
        method = RequestMethod.POST,
        path = "/auth/reset-password",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = false,
        body = localVariableBody)
  }

  /**
   * Generate a unique token for the reset password process
   *
   * @param userLogin Start a ResetPassword workflow for this user
   * @param body
   * @return RestResetPasswordTokenResponse
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   * @throws UnsupportedOperationException If the API returns an informational or redirection
   *   response
   * @throws ClientException If the API returns a client error response
   * @throws ServerException If the API returns a server error response
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(
      IllegalStateException::class,
      IOException::class,
      UnsupportedOperationException::class,
      ClientException::class,
      ServerException::class)
  fun resetPasswordToken(
      userLogin: kotlin.String,
      body: TokenServiceResetPasswordTokenBody
  ): RestResetPasswordTokenResponse {
    val localVarResponse = resetPasswordTokenWithHttpInfo(userLogin = userLogin, body = body)

    return when (localVarResponse.responseType) {
      ResponseType.Success ->
          (localVarResponse as Success<*>).data as RestResetPasswordTokenResponse
      ResponseType.Informational ->
          throw UnsupportedOperationException("Client does not support Informational responses.")
      ResponseType.Redirection ->
          throw UnsupportedOperationException("Client does not support Redirection responses.")
      ResponseType.ClientError -> {
        val localVarError = localVarResponse as ClientError<*>
        throw ClientException(
            "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
            localVarError.statusCode,
            localVarResponse)
      }
      ResponseType.ServerError -> {
        val localVarError = localVarResponse as ServerError<*>
        throw ServerException(
            "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
            localVarError.statusCode,
            localVarResponse)
      }
    }
  }

  /**
   * Generate a unique token for the reset password process
   *
   * @param userLogin Start a ResetPassword workflow for this user
   * @param body
   * @return ApiResponse<RestResetPasswordTokenResponse?>
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(IllegalStateException::class, IOException::class)
  fun resetPasswordTokenWithHttpInfo(
      userLogin: kotlin.String,
      body: TokenServiceResetPasswordTokenBody
  ): ApiResponse<RestResetPasswordTokenResponse?> {
    val localVariableConfig = resetPasswordTokenRequestConfig(userLogin = userLogin, body = body)

    return request<TokenServiceResetPasswordTokenBody, RestResetPasswordTokenResponse>(
        localVariableConfig)
  }

  /**
   * To obtain the request config of the operation resetPasswordToken
   *
   * @param userLogin Start a ResetPassword workflow for this user
   * @param body
   * @return RequestConfig
   */
  fun resetPasswordTokenRequestConfig(
      userLogin: kotlin.String,
      body: TokenServiceResetPasswordTokenBody
  ): RequestConfig<TokenServiceResetPasswordTokenBody> {
    val localVariableBody = body
    val localVariableQuery: MultiValueMap = mutableMapOf()
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders["Content-Type"] = "application/json"
    localVariableHeaders["Accept"] = "application/json"

    return RequestConfig(
        method = RequestMethod.PUT,
        path =
            "/auth/reset-password-token/{UserLogin}"
                .replace("{" + "UserLogin" + "}", encodeURIComponent(userLogin.toString())),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = false,
        body = localVariableBody)
  }

  /**
   * Revoke a JWT token
   *
   * @param body
   * @return RestRevokeResponse
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   * @throws UnsupportedOperationException If the API returns an informational or redirection
   *   response
   * @throws ClientException If the API returns a client error response
   * @throws ServerException If the API returns a server error response
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(
      IllegalStateException::class,
      IOException::class,
      UnsupportedOperationException::class,
      ClientException::class,
      ServerException::class)
  fun revoke(body: RestRevokeRequest): RestRevokeResponse {
    val localVarResponse = revokeWithHttpInfo(body = body)

    return when (localVarResponse.responseType) {
      ResponseType.Success -> (localVarResponse as Success<*>).data as RestRevokeResponse
      ResponseType.Informational ->
          throw UnsupportedOperationException("Client does not support Informational responses.")
      ResponseType.Redirection ->
          throw UnsupportedOperationException("Client does not support Redirection responses.")
      ResponseType.ClientError -> {
        val localVarError = localVarResponse as ClientError<*>
        throw ClientException(
            "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
            localVarError.statusCode,
            localVarResponse)
      }
      ResponseType.ServerError -> {
        val localVarError = localVarResponse as ServerError<*>
        throw ServerException(
            "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
            localVarError.statusCode,
            localVarResponse)
      }
    }
  }

  /**
   * Revoke a JWT token
   *
   * @param body
   * @return ApiResponse<RestRevokeResponse?>
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(IllegalStateException::class, IOException::class)
  fun revokeWithHttpInfo(body: RestRevokeRequest): ApiResponse<RestRevokeResponse?> {
    val localVariableConfig = revokeRequestConfig(body = body)

    return request<RestRevokeRequest, RestRevokeResponse>(localVariableConfig)
  }

  /**
   * To obtain the request config of the operation revoke
   *
   * @param body
   * @return RequestConfig
   */
  fun revokeRequestConfig(body: RestRevokeRequest): RequestConfig<RestRevokeRequest> {
    val localVariableBody = body
    val localVariableQuery: MultiValueMap = mutableMapOf()
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders["Content-Type"] = "application/json"
    localVariableHeaders["Accept"] = "application/json"

    return RequestConfig(
        method = RequestMethod.POST,
        path = "/auth/token/revoke",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = false,
        body = localVariableBody)
  }

  private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
      HttpUrl.Builder()
          .scheme("http")
          .host("localhost")
          .addPathSegment(uriComponent)
          .build()
          .encodedPathSegments[0]
}
